@page "/registration"
@using CrimeLogger.Shared

@using System.ComponentModel

@inject IAuthenticationService authenticationService
@inject NavigationManager NavigationManager
@inject ICrimeProvinceCitySuburbService CrimeProvinceCitySuburbService
@inject IJSRuntime JsRuntime


<PageTitle>Register Account</PageTitle>

<EditForm Model="UserForRegistration" OnValidSubmit="RegisterUser" class="pt-4">
    <DataAnnotationsValidator />
    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-black text-center py-2">
                            <strong>Sign Up</strong>
                        </h3>

                        @if (ShowRegistrationErrors)
                        {
                            <div>
                                @foreach (var error in Errors)
                                {
                                    <p class="text-danger text-center">@error</p>
                                }
                            </div>
                        }

                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            <InputText @bind-Value="UserForRegistration.Email" class="form-control" placeholder="Email" />
                            <ValidationMessage For="()=>UserForRegistration.Email" />
                        </div>
                        <div class="py-2">
                            <label>Allow Email Crime Notification</label> &nbsp;
                            <InputCheckbox @bind-Value="UserForRegistration.IsEmailNotification"></InputCheckbox>
                            <ValidationMessage For="()=>UserForRegistration.IsEmailNotification" />
                        </div>
                        <div class="py-2 input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"> +27</span>
                            </div>
                            <InputText @bind-Value="UserForRegistration.PhoneNo" class="form-control" placeholder="Phone number" />
                            
                        </div>
                        <div class="py-2">
                            <label>Address Details</label>
                            <InputSelect @bind-Value="UserForRegistration.ProvinceId" @oninput="CityChange" class="form-control">
                                <option value="">-- Select Province --</option>
                                @foreach (var prov in CrimeProvinces)
                                {

                                    <option value="@prov.ProvinceId">@prov.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => UserForRegistration.ProvinceId" />
                        </div>
                        <div class="py-2">
                            <InputSelect @bind-Value="UserForRegistration.CityId" @oninput="SuburbChange" class="form-control">
                                <option value="">-- Select City --</option>
                                @if (CrimeCities.Count() > 0)
                                {
                                    @foreach (var city in CrimeCities)
                                    {
                                        <option value="@city.CityId">@city.Name</option>
                                    }

                                }
                            </InputSelect>
                            <ValidationMessage For="() => UserForRegistration.CityId" />
                        </div>
                        <div class="py-2">
                            <InputSelect @bind-Value="UserForRegistration.SuburbId" class="form-control">
                                <option value="">-- Select Suburb --</option>
                                @foreach (var suburb in CrimeSuburbs)
                                {
                                    suburbIdSelected = suburb.SuburbId;
                                    <option value="@suburb.SuburbId">@suburb.Name</option>}

                            </InputSelect>
                            <ValidationMessage For="() => UserForRegistration.SuburbId" />
                        </div>
                        <div class="py-2">
                            <InputText @bind-Value="UserForRegistration.StreetName" class="form-control" placeholder="Street..." />
                            <ValidationMessage For="()=>UserForRegistration.StreetName" />
                        </div>
                        <div class="py-2">
                            <label>Terms & Conditions</label> &nbsp;
                            <InputCheckbox @bind-Value="UserForRegistration.IsTermsAccepted"></InputCheckbox>
                            <ValidationMessage For="()=>UserForRegistration.IsTermsAccepted" />
                        </div>
                        <div class="form-row py-2">
                            <div class="col mb-2">
                                <InputText @bind-Value="UserForRegistration.Password" type="password" id="password" placeholder="Password" class="form-control" />
                                <ValidationMessage For="()=>UserForRegistration.Password" />
                            </div>
                            <div class="col">
                                <InputText @bind-Value="UserForRegistration.ConfirmPassword" type="password" id="confirm" class="form-control" placeholder="Confirm Password" />
                                <ValidationMessage For="()=>UserForRegistration.ConfirmPassword" />
                            </div>

                        </div>

                        <div class="row col-md-6" id="recaptcha_container"></div>
                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            @if(reCAPTCHA_response != null)
                            {
                                @if (IsProcessing)
                                {
                                    <button type="submit" class="btn btn-outline-dark btn-block disabled"><i class="fas fa-sign-in-alt"></i> Please Wait....</button>

                                }
                                else
                                {
                                    <button type="submit" class="btn btn-outline-dark btn-block"><i class="fas fa-sign-in-alt"></i> Register</button>
                                }
                            }
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



</EditForm>



@code {

    public UserRequestDTO UserForRegistration = new UserRequestDTO();
    public bool IsProcessing { get; set; }
    public bool ShowRegistrationErrors { get; set; }
    private int? provinceIdSelected { get; set; }
    private int? cityIdSelected { get; set; }
    private int? suburbIdSelected { get; set; }

    private int WidgetId;

    public string reCAPTCHA_response { get; set; }


    public IEnumerable<string> Errors { get; set; }

    private IEnumerable<CrimeProvinceDTO> CrimeProvinces { get; set; } = new List<CrimeProvinceDTO>();
    private IEnumerable<CrimeCityDTO> CrimeCities { get; set; } = new List<CrimeCityDTO>();
    private IEnumerable<CrimeSuburbDTO> CrimeSuburbs { get; set; } = new List<CrimeSuburbDTO>();

    protected override async Task OnInitializedAsync()
    {

        CrimeProvinces = await CrimeProvinceCitySuburbService.GetAllCrimeProvinces();

    }


    private async Task RegisterUser()
    {
        ShowRegistrationErrors = false;
        IsProcessing = true;

        var result = await authenticationService.RegisterUser(UserForRegistration);

        
        if (result.isRegistrationSuccessful)
        {
            IsProcessing = false;
            NavigationManager.NavigateTo("/RegistrationSuccess");
        }
        else
        {
            await JsRuntime.ToastrError("User name / email address already exist.");
            IsProcessing = false;
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }
    }

    
    private async Task CityChange(ChangeEventArgs args)
    {

        if (args.Value == null)
        {
            provinceIdSelected = null;
            await JsRuntime.ToastrError("OOPS! Something went wrong please try again");
        }
        else
        {

            provinceIdSelected = Convert.ToInt32(args.Value);

            CrimeCities = await CrimeProvinceCitySuburbService.GetCityDetailsByProvinceId(provinceIdSelected.Value);
        }
    }


    private async Task SuburbChange(ChangeEventArgs args)
    {

        if (args.Value == null)
        {
            cityIdSelected = null;
            await JsRuntime.ToastrError("OOPS! Something went wrong please try again");

        }
        else
        {

            cityIdSelected = Convert.ToInt32(args.Value);

            CrimeSuburbs = await CrimeProvinceCitySuburbService.GetSuburbDetailsByCityId(cityIdSelected.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JsRuntime.InvokeVoidAsync("loadScript", "js/JsOfReCAPTCHA.js");

        if (firstRender)
        {
            WidgetId = await JsRuntime.InvokeAsync<int>("render_recaptcha", DotNetObjectReference.Create(this), "recaptcha_container", SD.ReCaptchaKey);
        };

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnSuccess(string response)
    {
        reCAPTCHA_response = response;
        StateHasChanged();
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public async void CallbackOnExpired()
    {
        await JsRuntime.ToastrError("Oops ReCAPTCHA Verification expired. Please try again.");
        NavigationManager.NavigateTo("/registration");
    }

    private void ShowResponse()
    {
        reCAPTCHA_response = $"The response for the reCAPTCHA widget: {reCAPTCHA_response}";
    }
}
}
