@page "/crime/submit"

@using Microsoft.AspNetCore.Components
@using CrimeLogger.Shared
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICrimeTypeService CrimeTypeService
@inject ICrimeProvinceCitySuburbService CrimeProvinceCitySuburbService
@inject ICrimeDetailService CrimeDetailService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILocalStorageService localStorage

@*@attribute [Authorize(Roles = SD.Role_User)]*@

<PageTitle>Submit-Crime</PageTitle>
@if (CrimeDetailModel == null)
{
    <div><img src="/images/1495.gif" alt="loading" style="place-content:center" /><p>Loading.....</p></div>
}
else
{
    <div class="row mt-2 mb-5 ml-2 mr-2">
        <h3 class="md-2 col-sm-12 pl-0" style="color: #000000 ">@Title Crime Details</h3>
        <div class="card col-sm-6" style="border-radius:10px">
            <div class="card-body">
                <EditForm Model="CrimeDetailModel" OnValidSubmit="HandelCrimeUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Province</label>
                        <InputSelect @bind-Value="CrimeDetailModel.Province_Id" @oninput="CityChange" class="form-control">
                            <option value="">-- Select Province --</option>
                            @foreach (var prov in CrimeProvinces)
                                {

                                <option value="@prov.ProvinceId">@prov.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="() => CrimeDetailModel.Province_Id" />
                    </div>
                    <div class="form-group">
                        <label>City</label>
                        <InputSelect @bind-Value="CrimeDetailModel.City_Id" @oninput="SuburbChange" class="form-control">
                            <option value="">-- Select City --</option>
                            @if (CrimeCities.Count() > 0)
                                {
                                @foreach (var city in CrimeCities)
                                    {
                                    <option value="@city.CityId">@city.Name</option>
                                    }

                                }
                        </InputSelect>
                        <ValidationMessage For="() => CrimeDetailModel.City_Id" />
                    </div>
                    <div class="form-group">
                        <label>Suburb</label>
                        <InputSelect @bind-Value="CrimeDetailModel.Suburb_Id" class="form-control">
                            <option value="">-- Select Suburb --</option>
                            @foreach (var suburb in CrimeSuburbs)
                                {
                                    suburbIdSelected = suburb.SuburbId;
                                <option value="@suburb.SuburbId">@suburb.Name</option>}
                        </InputSelect>
                        <ValidationMessage For="() => CrimeDetailModel.Suburb_Id" />
                    </div>
                    <div class="form-group">
                        <label>Street Name</label>
                        <InputText @bind-Value="CrimeDetailModel.Street" class="form-control"></InputText>
                        <ValidationMessage For="() => CrimeDetailModel.Street" />
                    </div>
                    <div class="form-group">
                        <label>Type of Crime</label>
                        <InputSelect @bind-Value="CrimeDetailModel.CrimeType_Id" class="form-control">
                            <option value="">-- Select Type of Crime --</option>

                            @foreach (var type in CrimeTypes)
                                {

                                <option value="@type.CrimeId">@type.Name</option>}
                        </InputSelect>
                        <ValidationMessage For="() => CrimeDetailModel.CrimeType_Id" />
                    </div>
                    <div class="form-group">
                        <label>Date of Crime</label>
                        <InputDate @bind-Value="CrimeDetailModel.CrimeDate" class="form-control">

                        </InputDate>
                        <ValidationMessage For="() => CrimeDetailModel.CrimeDate" />
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputText @bind-Value="CrimeDetailModel.Description" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>True and Honest Report</label>
                        <InputCheckbox @bind-Value="CrimeDetailModel.IsTrueCrime" class="list-inline"></InputCheckbox>
                        <ValidationMessage For="() => CrimeDetailModel.IsTrueCrime" />

                    </div>
                    <div class="form-group">
                        <button class="btn btn-outline-danger">@Title Crime</button>
                        <NavLink href="crime/detail" class="btn btn-dark">Back</NavLink>
                    </div>

                    <div class="form-group">
                        <InputText @bind-Value="CrimeDetailModel.CreatedBy" input type="hidden" class="form-control"></InputText>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="col-sm-6">
            <div class="">
            @foreach(var textdescription in CrimeSubmitText)
                {
                 <div class="form-group">
                    <div class="row col-sm-12">
                        <div class="card col-sm-12 mt-0" style="border-radius:10px">
                            <div class="card-body">
                                <div class="form-group">
                                    <p>
                                      <b>@textdescription</b> 
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                 </div>
                }
            </div>
        </div>
    </div>
}


@code{

    [CascadingParameter]

    public Task<AuthenticationState> authenticationState { get; set; }

    private CrimeDetailDTO CrimeDetailModel { get; set; } = new CrimeDetailDTO();

    private IEnumerable<CrimeProvinceDTO> CrimeProvinces { get; set; } = new List<CrimeProvinceDTO>();
    private IEnumerable<CrimeCityDTO> CrimeCities { get; set; } = new List<CrimeCityDTO>();
    private IEnumerable<CrimeSuburbDTO> CrimeSuburbs { get; set; } = new List<CrimeSuburbDTO>();
    private IEnumerable<CrimeTypeDTO> CrimeTypes { get; set; } = new List<CrimeTypeDTO>();

    private string Title { get; set; } = "Submit";

    private int? provinceIdSelected { get; set; }
    private string _provinceName { get; set; }
    private int? cityIdSelected { get; set; }
    private string _cityName { get; set; }
    private int? suburbIdSelected { get; set; }
    private string _suburbName { get; set; }

    public bool ParentProcessing { get; set; }

    double MyLat { get; set; }
    double MyLng { get; set; }

    string[] CrimeSubmitText = new string[]
                {
                SD.CrimeSubmitText1,
                SD.CrimeSubmitText2,
                SD.CrimeSubmitText3,
                SD.CrimeSubmitText4,
                SD.CrimeSubmitText5,
                SD.CrimeSubmitText6,
                };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            CrimeDetailModel.CrimeDate = DateTime.Now;
            CrimeProvinces = await CrimeProvinceCitySuburbService.GetAllCrimeProvinces();
            CrimeTypes = await CrimeTypeService.GetAllCrimeTypes();
        }
    }

    private async Task CityChange(ChangeEventArgs args)
    {

        if (args.Value == null)
        {
            provinceIdSelected = null;
            await JsRuntime.ToastrError("OOPS! Something went wrong please try again");
        }
        else
        {

            provinceIdSelected = Convert.ToInt32(args.Value);

            CrimeCities = await CrimeProvinceCitySuburbService.GetCityDetailsByProvinceId(provinceIdSelected.Value);
        }
    }

    private async Task SuburbChange(ChangeEventArgs args)
    {

        if (args.Value == null)
        {
            cityIdSelected = null;
            await JsRuntime.ToastrError("OOPS! Something went wrong please try again");

        }
        else
        {

            cityIdSelected = Convert.ToInt32(args.Value);

            CrimeSuburbs = await CrimeProvinceCitySuburbService.GetSuburbDetailsByCityId(cityIdSelected.Value);
        }
    }



    private async Task HandelCrimeUpsert()
    {
        try
        {
            var userInfo = await localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            CrimeDetailModel.CreatedBy = userInfo.Id;


            if (CrimeDetailModel.Id == 0 && userInfo != null)
            {
                
                var response = await HandleGeoCoding();

                if (response.Any())
                {
                    CrimeDetailModel.MyLat = MyLat;
                    CrimeDetailModel.MyLng = MyLng;

                    if (MyLat != 0 && MyLng != 0)
                    {
                        CrimeDetailModel.IsMarkerAdded = true;
                        //await JsRuntime.ToastrSeccess("GeoCoding completed");
                    }
                    else
                    {
                        CrimeDetailModel.IsMarkerAdded = false;
                        await JsRuntime.ToastrError("GeoCoding unsuccessful! Manual Geocoding will be done on the adress for marker placement.");
                    }
                }

                var createdResult = await CrimeDetailService.CreateCrime(CrimeDetailModel);

                if(!createdResult.IsSuccessStatusCode)
                {
                    await JsRuntime.ToastrError("Submission unsuccessful, submit limit exceeded.");
                }
                else
                {
                     await JsRuntime.ToastrSeccess("Crime successfully logged! Stay Safe!");
                     
                     NavigationManager.NavigateTo("/crime/detail");
                }
            }
        }
        catch (Exception e)
        {

            throw new Exception(e.Message);
        }
       
    }

    // GeoCoding Method for crime submission page
    public async Task<string> HandleGeoCoding()
    {
        try
        {
            GoogleGeocoder geocoder = new GoogleGeocoder() { ApiKey = SD.APIGeo };
            IEnumerable<CrimeProvinceDTO> provincequery = CrimeProvinces.Where(CrimeProvinces => CrimeProvinces.ProvinceId == provinceIdSelected);

            if (provincequery.Any())
            {
                foreach (var prov in provincequery)
                {
                    _provinceName = prov.Name;
                }
            }

            IEnumerable<CrimeCityDTO> cityquery = CrimeCities.Where(CrimeCities => CrimeCities.CityId == cityIdSelected);

            if (cityquery.Any())
            {
                foreach (var city in cityquery)
                {
                    _cityName = city.Name;
                }
            }

            IEnumerable<CrimeSuburbDTO> suburbquery = CrimeSuburbs.Where(CrimeSuburbs => CrimeSuburbs.SuburbId == suburbIdSelected);

            if (suburbquery.Any())
            {
                foreach (var suburb in suburbquery)
                {
                    _suburbName = suburb.Name;
                }
            }

            IEnumerable<GoogleAddress> addresses = await geocoder.GeocodeAsync($"South Africa,{_provinceName},{_cityName},{_suburbName},{CrimeDetailModel.Street} "); // pupulate addresses here

            try
            {

                var country = addresses.Where(a => !a.IsPartialMatch).Select(a => a[GoogleAddressType.Country]).FirstOrDefault();

                var formattedAddress = ("Formatted: " + addresses.First().FormattedAddress); 
                MyLat = (addresses.First().Coordinates.Latitude);
                MyLng = (addresses.First().Coordinates.Longitude); //Coordinates: 38.8791981, -76.9818437
                var MyLatLng = MyLat.ToString() + "," + MyLng.ToString();

                return MyLatLng;
            }
            catch (Exception e)
            {

                throw new Exception(e.Message);
            }
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
}
